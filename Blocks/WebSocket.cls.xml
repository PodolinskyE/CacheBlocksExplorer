<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Blocks.WebSocket">
<Super>%CSP.WebSocket</Super>
<TimeCreated>63812,72249.000955</TimeCreated>

<Method name="OnPreServer">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    Quit $$$OK
]]></Implementation>
</Method>

<Method name="Server">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set timeout=.5
    set quit=0
    set dataGN="",event=""
    #dim queue As %SYSTEM.WorkMgrIPQ = ""
    #dim exception As %Exception.AbstractException
    Set len=32656
    while 'quit {
        try {
            Set data=..Read(.len, .status, $select($isobject(event):0.1,1:timeout))
            If $$$ISERR(status),$$$GETERRORCODE(status) = $$$CSPWebSocketClosed {
                set quit=1
                quit
            }
            set timeouted = 0
            If $$$ISERR(status),$$$GETERRORCODE(status) = $$$CSPWebSocketTimeout {
                set timeouted = 1
            }
            if timeouted {
                if $isobject(queue),event'="" {
                    set atEnd=0,nextRead=0
                    set response={"event": event, "data": []}
                    kill blocksData
                    set countData=0
                    while ('atEnd)&&('nextRead) {
                        Set data=queue.Get(0)
                        quit:data=""
                        if $listget(data)=1,$i(countData) {
                            if $p(event,"_")="blocks" {
                                set $listbuild(parent,block,global,fill)=$listget(data,2)
                                if $p(event,"_",2)="tree" {
                                    if '$data(blocksData(parent)) {
                                        set blocksData(parent)={"block": parent, "child": []}
                                        do response.data.$push(blocksData(parent))
                                    }
                                    do blocksData(parent).child.$push(block)
                                } else {
                                    if '$data(blocksData(global)) {
                                        set blocksData(global)={"global": global, "blocks": []}
                                        do response.data.$push(blocksData(global))
                                    }
                                    do blocksData(global).blocks.$push([block,fill])
                                }
                            }
                        } elseif $listget(data)=0 {
                            Set sc=queue.Decode(data,,.atend)
                            set nextRead=1
                            $$$ThrowOnError(sc)
                        }
                        set nextRead=nextRead||(countData>=5000)
                    }
                    if response.data.$size() > 0 {
                        do ..Write(response.$toJSON())
                    }
                    if atEnd {
                        set queue=""
                    }
                }
                quit
            }
            set request=##class(%Object).$fromJSON(data)
            set event=request.event
            if $piece(event,"_")="blocks" {
                set asTree=($piece(event,"_",2)="tree")
                
                #; clear previous queue if it still exists
                if $isobject(queue) {
                    do queue.Clear(0)
                }
                Set ^||%ISC.WorkQueueMgr("ForceJobs")=2
                Set queue=$system.WorkMgrIPQ.Initialize("/multicompile=1",.sc)
                $$$ThrowOnError(sc)
                set worker="##class(Blocks.WebSocket).GetBlocks"
                Set sc=queue.Queue(worker,request.data.directory,asTree) 
                if $$$ISERR(sc) {
                    set queue=""
                    set event=""
                    $$$ThrowOnError(sc)
                }
            } elseif event="ping" {
                do ..Write({
                    "event": "ping",
                    "data": "pong"
                }.$toJSON())
            } elseif event="exit" {
                do ..Write({
                    "event": "exit",
                    "data": "OK"
                }.$toJSON())
                set quit=1
                quit
            } else {
                do ..Write({
                    "event": "error",
                    "data": ("Unrecognized event: "_event)
                }.$toJSON())
            }
        } catch exception {
            set queue=""
            do ..Write({
                "event": "error",
                "data": exception.DisplayString()
            }.$toJSON())
        }
    }
    Set status=..EndServer()
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnPostServer">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetBlocks">
<ClassMethod>1</ClassMethod>
<FormalSpec>aDirectory:%String="",aAsTree:%Boolean=0</FormalSpec>
<Implementation><![CDATA[
    quit:aDirectory="" 0
    new $namespace
    znspace "%sys"
    
    OPEN 63:"^^"_aDirectory
    
    set tSC=..ReadBlocks(aAsTree,3,,,.count)
    $$$ThrowOnError(tSC)
        
    CLOSE 63
    quit $$$OK
]]></Implementation>
</Method>

<Method name="ReadBlocks">
<ClassMethod>1</ClassMethod>
<FormalSpec>aAsTree:%Boolean=0,aBlockId:%Integer=3,aParentBlock="",aGlobal:%String="",aHasLong=0,aCount</FormalSpec>
<Implementation><![CDATA[
#define toInt(%bytes) ($a(%bytes,1)+($a(%bytes,2)*256)+($a(%bytes,3)*65536)+($a(%bytes,4)*16777216))

    new $namespace
    znspace "%SYS"
    quit:aBlockId=0 0
    
    set blockSize=8192

    #dim error As %Exception.AbstractException = ""
    try {
        View aBlockId
        if aParentBlock'="" {
            set offset=$view(0,0,-4)
            set offset=$$$toInt(offset)+28
            do add(aParentBlock,aBlockId,aGlobal,offset)
        }
        set blockType=$view($Zutil(40,32,1),0,1)
        set nodes=0
        if blockType=8 {
            if aHasLong {
                For N=1:1 {
                    Set X=$VIEW(N*2,-6)
                    Quit:X=""
                    set gdview=$ascii(X)
                    if $listfind($listbuild(5,7,3),gdview) {
                        set cnt=$piece(X,",",2)
                        if $increment(aCount,cnt),$increment(aCount(aGlobal),cnt)
                        set blocks=$piece(X,",",4,*)
                        for i=1:1:cnt {
                            set nextBlock=$piece(X,",",3+i)
                            do add(aBlockId,nextBlock,aGlobal,blockSize)
                        }
                    }
                }
            }
        } else {
            For N=1:1 {
                Set X=$VIEW(N-1*2+1,-6)
                Quit:X=""
                Set nextBlock=$VIEW(N*2,-5)
                if blockType=9 set aGlobal=X
                set haslong=0
                if $piece($view(N*2,-6),",",1) {
                    set haslong=1
                }
                set nodes($increment(nodes))=$listbuild(nextBlock,aGlobal,haslong)
            }
        }
        
        for i=1:1:nodes {
            do ..ReadBlocks(aAsTree,$listget(nodes(i)),aBlockId,$listget(nodes(i),2),$listget(nodes(i),3),.aCount)
        }
    } catch error {
        
    }   
    #; finally 
    
    if $isobject(error) Throw error
        
    quit $$$OK
add(parentBlock,blockId,global,offset)
    set data=$listbuild(parentBlock,blockId)
    if 'aAsTree set data=data_$listbuild(global,$j(offset/blockSize*100,0,0))
    do %ISCIPQ.Put($listbuild(1,data))
]]></Implementation>
</Method>
</Class>
</Export>
