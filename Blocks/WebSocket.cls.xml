<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Blocks.WebSocket">
<Super>%CSP.WebSocket</Super>
<TimeCreated>63812,72249.000955</TimeCreated>

<Property name="WorkIPQ">
<Type>%SYSTEM.WorkMgrIPQ</Type>
</Property>

<Property name="Event">
<Type>%String</Type>
</Property>

<Method name="WorkIPQGet">
<ReturnType>%SYSTEM.WorkMgrIPQ</ReturnType>
<Implementation><![CDATA[
    if '$isobject($get(i%WorkIPQ)) {
        Set ^||%ISC.WorkQueueMgr("ForceJobs")=2
        Set i%WorkIPQ=$system.WorkMgrIPQ.Initialize("/multicompile=1",.sc)
        $$$ThrowOnError(sc)
    }
    quit i%WorkIPQ
]]></Implementation>
</Method>

<Method name="OnPreServer">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    Quit $$$OK
]]></Implementation>
</Method>

<Method name="Server">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set timeout=.5
    set quit=0
    set dataGN="",event=""
    #dim queue As %SYSTEM.WorkMgrIPQ = ""
    #dim exception As %Exception.AbstractException
    Set len=32656
    while 'quit {
        try {
            Set data=..Read(.len, .status, $select($isobject(event):0.1,1:timeout))
            If $$$ISERR(status),$$$GETERRORCODE(status) = $$$CSPWebSocketClosed {
                set quit=1
                quit
            }
            set timeouted = 0
            If $$$ISERR(status),$$$GETERRORCODE(status) = $$$CSPWebSocketTimeout {
                set timeouted = 1
            }
            if timeouted {
                set sc = ..SendBlocksData()
            } else {
                set sc = ..Action(data)
            }
            $$$ThrowOnError(sc)
        } catch exception {
            do ..Write("error", exception.DisplayString())
            set quit=1
        }
    }
    Set status=..EndServer()
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="SendBlocksData">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    quit:..Event="" $$$OK
    
    set atEnd=0,nextRead=0
    set responseData = ##class(%ListOfDataTypes).%New()
    kill blocksData
    set countData=0
    while ('atEnd)&&('nextRead) {
        Set data=..WorkIPQ.Get(0)
        quit:data=""
        if $listget(data)=1,$i(countData) {
            if $p(..Event,"_")="blocks" {
                set $listbuild(parent,block,global,fill)=$listget(data,2)
                if $p(..Event,"_",2)="tree" {
                    if '$data(blocksData(parent)) {
                        set blocksData(parent)=##class(%ZEN.proxyObject).%New()
                        set blocksData(parent).block = parent
                        set blocksData(parent).child = ##class(%ListOfDataTypes).%New()
                        do responseData.Insert(blocksData(parent))
                    }
                    do blocksData(parent).child.Insert(block)
                } else {
                    if '$data(blocksData(global)) {
                        set blocksData(global)=##class(%ZEN.proxyObject).%New()
                        set blocksData(global).global = global
                        set blocksData(global).blocks = ##class(%ListOfDataTypes).%New()
                        do responseData.Insert(blocksData(global))
                    }
                    set blockInfo = ##class(%ListOfDataTypes).%New()
                    do blockInfo.Insert(block)
                    do blockInfo.Insert(fill)
                    do blocksData(global).blocks.Insert(blockInfo)
                    kill blockInfo
                }
            }
        } elseif $listget(data)=0 {
            Set sc=..WorkIPQ.Decode(data,,.atend)
            set nextRead=1
            $$$ThrowOnError(sc)
        }
        set nextRead=nextRead||(countData>=5000)
    }
    if responseData.Size > 0 {
        do ..Write(..Event, responseData)
    }
    if atEnd {
        set ..Event = ""
    }
    quit st
]]></Implementation>
</Method>

<Method name="Action">
<FormalSpec>obj:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    #dim exception As %Exception.AbstractException
    try {
        set action = obj.event
        set data = ##class(%ListOfDataTypes).%New()
        if action="ping" {
            set sc=..Write(action, "pong")
        } elseif $p(action,"_")="blocks" {
            set asTree=($piece(action,"_",2)="tree")
            
            #; clear previous queue
            do ..WorkIPQ.Clear(0)

            set worker="##class(Blocks.WebSocket).GetBlocks"
            Set sc=..WorkIPQ.Queue(worker,obj.data.directory,asTree) 
            $$$ThrowOnError(sc)
            set ..Event = action
        }
        
    } catch exception {
        set st = exception.AsStatus()
    }
    quit st
]]></Implementation>
</Method>

<Method name="OnPostServer">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetBlocks">
<ClassMethod>1</ClassMethod>
<FormalSpec>aDirectory:%String="",aAsTree:%Boolean=0</FormalSpec>
<Implementation><![CDATA[
    quit:aDirectory="" 0
    new $namespace
    znspace "%sys"
    
    OPEN 63:"^^"_aDirectory
    
    set tSC=..ReadBlocks(aAsTree,3,,,.count)
    $$$ThrowOnError(tSC)
        
    CLOSE 63
    quit $$$OK
]]></Implementation>
</Method>

<Method name="ReadBlocks">
<ClassMethod>1</ClassMethod>
<FormalSpec>aAsTree:%Boolean=0,aBlockId:%Integer=3,aParentBlock="",aGlobal:%String="",aHasLong=0,aCount</FormalSpec>
<Implementation><![CDATA[
#define toInt(%bytes) ($a(%bytes,1)+($a(%bytes,2)*256)+($a(%bytes,3)*65536)+($a(%bytes,4)*16777216))

    new $namespace
    znspace "%SYS"
    quit:aBlockId=0 0
    
    set blockSize=8192

    #dim error As %Exception.AbstractException = ""
    try {
        View aBlockId
        if aParentBlock'="" {
            set offset=$view(0,0,-4)
            set offset=$$$toInt(offset)+28
            do add(aParentBlock,aBlockId,aGlobal,offset)
        }
        set blockType=$view($Zutil(40,32,1),0,1)
        set nodes=0
        if blockType=8 {
            if aHasLong {
                For N=1:1 {
                    Set X=$VIEW(N*2,-6)
                    Quit:X=""
                    set gdview=$ascii(X)
                    if $listfind($listbuild(5,7,3),gdview) {
                        set cnt=$piece(X,",",2)
                        if $increment(aCount,cnt),$increment(aCount(aGlobal),cnt)
                        set blocks=$piece(X,",",4,*)
                        for i=1:1:cnt {
                            set nextBlock=$piece(X,",",3+i)
                            do add(aBlockId,nextBlock,aGlobal,blockSize)
                        }
                    }
                }
            }
        } else {
            For N=1:1 {
                Set X=$VIEW(N-1*2+1,-6)
                Quit:X=""
                Set nextBlock=$VIEW(N*2,-5)
                if blockType=9 set aGlobal=X
                set haslong=0
                if $piece($view(N*2,-6),",",1) {
                    set haslong=1
                }
                set nodes($increment(nodes))=$listbuild(nextBlock,aGlobal,haslong)
            }
        }
        
        for i=1:1:nodes {
            do ..ReadBlocks(aAsTree,$listget(nodes(i)),aBlockId,$listget(nodes(i),2),$listget(nodes(i),3),.aCount)
        }
    } catch error {
        
    }   
    #; finally 
    
    if $isobject(error) Throw error
        
    quit $$$OK
add(parentBlock,blockId,global,offset)
    set data=$listbuild(parentBlock,blockId)
    if 'aAsTree set data=data_$listbuild(global,$j(offset/blockSize*100,0,0))
    do %ISCIPQ.Put($listbuild(1,data))
]]></Implementation>
</Method>

<Method name="Read">
<Description>
Reads up to len characters from the client.
If the call is successful the status (sc) will be returned as $$$OK, otherwise an error code of $$$CSPWebSocketTimeout 
indicates a timeout and $$$CSPWebSocketClosed indicates that the client has terminated the WebSocket.</Description>
<FormalSpec><![CDATA[&len:%Integer=32656,&sc:%Status,timeout:%Integer=86400]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    Set json = ##super(len, .sc, timeout)
    Do:$$$ISERR(sc) ..EndServer()
    Set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(json,,.obj,1)
    Do:$$$ISERR(st) ..EndServer()
    Quit obj
]]></Implementation>
</Method>

<Method name="Write">
<FormalSpec>eventName:%String="",data:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    if '$d(data) {
        quit ##super(eventName)
    }
    set response = ##class(%ZEN.proxyObject).%New()
    set response.event = eventName
    set response.data = data
    
    Quit ##super(..OutputToStr(response,"%ToJSON"))
]]></Implementation>
</Method>

<Method name="OutputToStr">
<ClassMethod>1</ClassMethod>
<FormalSpec>obj,method,args...</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    Set str=""
    //Redirect IO to the current routine - makes use of the labels defined below
    Use $io::("^"_$ZNAME)
    
    //Enable redirection
    Do ##class(%Device).ReDirectIO(1)
    
    if $isobject(obj) {
        Do $Method(obj,method,args...)
    } elseif $$$comClassDefined(obj) {
        Do $ClassMethod(obj,method,args...)
    }
    
    //Disable redirection
    Do ##class(%Device).ReDirectIO(0)
    Quit str      
    //Labels that allow for IO redirection
    //Read Character - we Don't care about reading
rchr(c)      quit
    //Read a string - we Don't care about reading
rstr(sz,to)  quit
    //Write a character - call the output label
wchr(s)      Do output($char(s))  quit
    //Write a form feed - call the output label
wff()        Do output($char(12))  quit
    //Write a newline - call the output label
wnl()        Do output($char(13,10))  quit
    //Write a string - call the output label
wstr(s)      Do output(s)  quit
    //Write a tab - call the output label
wtab(s)      Do output($char(9))  quit
    //Output label - this is where you would handle what you actually want to Do.
    //  in our case, we want to Write to str
output(s)    Set str=str_s   quit
]]></Implementation>
</Method>
</Class>
</Export>
